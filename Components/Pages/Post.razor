@page "/post/{BlogPostId}"

@using Components.Interfaces
@using Markdig

@inject IBlogApi _api
@inject IBlogNotificationService _notificationService
@inject NavigationManager _navman

@implements IDisposable

@if( BlogPost != null )
{
    <PageTitle>@BlogPost.Title</PageTitle>
    <HeadContent>
        <meta property="og:title" content="@BlogPost.Title" />
        <meta property="og:description" content="@(new string(BlogPost.Text.Take(100).ToArray()))" />
        <meta property="og:image" content="@($"{_navman.BaseUri}/pathtoanimage.png")" />
        <meta property="og:url" content="@_navman.Uri" />
        <meta name="twitter:card" content="@(new string(BlogPost.Text.Take(100).ToArray()))" />
    </HeadContent>

    <h2>@BlogPost.Title</h2>
    @((MarkupString)Markdig.Markdown.ToHtml( BlogPost.Text, _pipeline ))
}

@code
{
    [Parameter]
    public string? BlogPostId { get; set; }

    public BlogPost? BlogPost { get; set; }

    private MarkdownPipeline _pipeline = default!;

    protected override Task OnInitializedAsync()
    {
        this._notificationService.BlogPostChanged += PostChanged;

        this._pipeline = new MarkdownPipelineBuilder().UseEmojiAndSmiley().Build();

        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if( this.BlogPostId is not null )
        {
            this.BlogPost = await _api.GetBlogPostAsync( this.BlogPostId ).ConfigureAwait( false );
        }
        await base.OnParametersSetAsync();
    }

    private async void PostChanged( BlogPost blogPost )
    {
        if( ( string.IsNullOrEmpty( blogPost.Id ) ) ||
            ( string.IsNullOrEmpty( BlogPost?.Id ) ) )
        {
            return;
        }
        if( ( blogPost.Id ).Equals( BlogPost.Id, StringComparison.CurrentCultureIgnoreCase ) )
        {
            BlogPost = blogPost;
            await InvokeAsync( () => this.StateHasChanged() );
        }
    }

    void IDisposable.Dispose() => this._notificationService.BlogPostChanged -= PostChanged;
}
