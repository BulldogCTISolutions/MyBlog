@inject IJSRuntime JSRuntime

@implements IDisposable

<NavigationLock ConfirmExternalNavigation="@(CurrentEditContext.IsModified() && CheckNavigation)"
                OnBeforeInternalNavigation="OnBeforeInternalNavigation">
</NavigationLock>

@code
{
    [CascadingParameter]
    public required EditContext CurrentEditContext { get; set; }

    [Parameter]
    public bool CheckNavigation { get; set; } = true;

    public string InternalNavigationMessage { get; set; } = @"You are about to lose changes, are you sure you want to navigate away?";

    protected override Task OnInitializedAsync()
    {
        this.CurrentEditContext.OnFieldChanged += OnFieldChangedAsync;
        return base.OnInitializedAsync();
    }

    private async void OnFieldChangedAsync( object? sender, FieldChangedEventArgs args )
    {
        await InvokeAsync( StateHasChanged );
    }

    private async Task OnBeforeInternalNavigation( LocationChangingContext location )
    {
        if( this.CurrentEditContext.IsModified() && CheckNavigation )
        {
            bool isConfirmed = await JSRuntime.InvokeAsync<bool>( "confirm", InternalNavigationMessage );
            if( isConfirmed == false )
            {
                location.PreventNavigation();
            }
        }
    }

    void IDisposable.Dispose()
    {
        CurrentEditContext.OnFieldChanged -= OnFieldChangedAsync;
    }
}
